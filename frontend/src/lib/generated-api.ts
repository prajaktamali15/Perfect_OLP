/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check for API and database */
        get: operations["AppController_healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: operations["UsersController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all users (instructor only) */
        get: operations["UsersController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile */
        get: operations["UsersController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update current user profile */
        patch: operations["UsersController_updateProfile"];
        trace?: never;
    };
    "/users/me/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Change password for current user */
        put: operations["UsersController_changePassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me/photo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Upload profile photo */
        put: operations["UsersController_uploadProfilePhoto"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me/enrollments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user enrollments */
        get: operations["UsersController_getMyEnrollments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User login */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User registration */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all public courses */
        get: operations["CoursesController_findAllPublic"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get analytics for instructor courses */
        get: operations["CoursesController_getCourseAnalytics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get course by id */
        get: operations["CoursesController_findById"];
        put?: never;
        post?: never;
        /** Delete a course (instructor) */
        delete: operations["CoursesController_deleteCourse"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get courses visible to current user */
        get: operations["CoursesController_findAllForStudent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new course (instructor) */
        post: operations["CoursesController_createCourse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/{id}/lessons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add lesson to a course */
        post: operations["CoursesController_addLesson"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/{id}/lessons/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reorder lessons within a course */
        patch: operations["CoursesController_reorderLessons"];
        trace?: never;
    };
    "/courses/{id}/prerequisites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a prerequisite to a course */
        post: operations["CoursesController_addPrerequisite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/instructor/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get courses for current instructor */
        get: operations["CoursesController_findCoursesForInstructor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/course/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enroll current student into a course */
        post: operations["EnrollmentsController_enroll"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/course/{courseId}/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get students enrolled in a course */
        get: operations["EnrollmentsController_getEnrolledStudents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/course-details/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get course details for the enrolled student */
        get: operations["EnrollmentsController_getCourseDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/my-courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current student enrollments */
        get: operations["EnrollmentsController_myCourses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/course/{courseId}/complete-lesson": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Mark lesson as completed for a course */
        patch: operations["EnrollmentsController_completeLesson"];
        trace?: never;
    };
    "/enrollments/course/{courseId}/generate-certificate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Generate certificate for a completed course */
        patch: operations["EnrollmentsController_generateCertificate"];
        trace?: never;
    };
    "/progress/course/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get progress for a course (instructor) */
        get: operations["ProgressController_getCourseProgress"];
        put?: never;
        /** Upsert progress for current student */
        post: operations["ProgressController_upsertProgress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/progress/my-courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get progress for current student */
        get: operations["ProgressController_getStudentProgress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/instructor/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get analytics for instructor courses */
        get: operations["AnalyticsController_instructorCoursesAnalytics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/course/{courseId}/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get total students for a course */
        get: operations["AnalyticsController_totalStudents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/course/{courseId}/completion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get completion rate for a course */
        get: operations["AnalyticsController_completionRate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get analytics across instructor courses */
        get: operations["AnalyticsController_allCoursesAnalytics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/students/my-courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get courses current student is enrolled in */
        get: operations["StudentsController_getMyCourses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/students/enroll/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enroll in a course */
        post: operations["StudentsController_enrollInCourse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/students/complete/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark course as completed and generate certificate */
        post: operations["StudentsController_completeCourse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/students/profile/photo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Upload or update student profile photo */
        put: operations["StudentsController_uploadProfilePhoto"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get instructor profile */
        get: operations["InstructorController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update instructor profile */
        patch: operations["InstructorController_updateProfile"];
        trace?: never;
    };
    "/instructor/courses/me/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get courses of logged-in instructor */
        get: operations["InstructorController_getMyCourses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all course categories */
        get: operations["InstructorController_getCourseCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new course */
        post: operations["InstructorController_createCourse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get course by ID */
        get: operations["InstructorController_getCourse"];
        put?: never;
        post?: never;
        /** Delete a course */
        delete: operations["InstructorController_deleteCourse"];
        options?: never;
        head?: never;
        /** Update a course */
        patch: operations["InstructorController_updateCourse"];
        trace?: never;
    };
    "/instructor/courses/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search courses by query */
        get: operations["InstructorController_searchCourses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/{courseId}/lessons/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reorder lessons in a course */
        patch: operations["InstructorController_reorderLessons"];
        trace?: never;
    };
    "/instructor/courses/{courseId}/lessons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add lesson to a course */
        post: operations["InstructorController_addLesson"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructor/courses/lessons/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a lesson */
        delete: operations["InstructorController_deleteLesson"];
        options?: never;
        head?: never;
        /** Update a lesson */
        patch: operations["InstructorController_updateLesson"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginDto: {
            /**
             * @description Email address of the user
             * @example student@example.com
             */
            email: string;
            /**
             * @description Password for the user account
             * @example password123
             */
            password: string;
        };
        LoginResponseDto: {
            /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
            access_token: string;
            /**
             * @description Basic user information
             * @example {
             *       "id": 1,
             *       "email": "student@example.com",
             *       "role": "STUDENT"
             *     }
             */
            user: Record<string, never>;
        };
        RegisterDto: {
            /**
             * @description Email address of the user
             * @example student@example.com
             */
            email: string;
            /**
             * @description Password for the user account
             * @example password123
             */
            password: string;
            /**
             * @description Full name of the user
             * @example John Doe
             */
            name?: string;
            /**
             * @description Role of the user
             * @example STUDENT
             * @enum {string}
             */
            role?: "STUDENT" | "INSTRUCTOR";
        };
        RegisterResponseDto: {
            /** @example Registration successful! */
            message: string;
            /**
             * @example {
             *       "id": 1,
             *       "email": "student@example.com",
             *       "role": "STUDENT"
             *     }
             */
            user: Record<string, never>;
            authResponse: components["schemas"]["LoginResponseDto"];
        };
        LessonDTO: {
            /**
             * @description Lesson title
             * @example Introduction to React
             */
            title: string;
            /**
             * @description Text content of the lesson
             * @example Lesson content goes here
             */
            content?: string;
            /**
             * @description Video URL for the lesson
             * @example https://video-url.com
             */
            videoUrl?: string;
            /**
             * @description Attachment URL
             * @example https://attachment-url.com/file.pdf
             */
            attachmentUrl?: string;
            /**
             * @description Duration of the lesson
             * @example 15 min
             */
            duration?: string;
            /**
             * @description Order of the lesson in the course
             * @example 1
             */
            order?: number;
        };
        CreateCourseDto: {
            /**
             * @description Course title
             * @example React for Beginners
             */
            title: string;
            /**
             * @description Course description
             * @example Learn React from scratch
             */
            description?: string;
            /**
             * @description Category ID for the course
             * @example 3
             */
            categoryId?: number;
            /**
             * @description Course difficulty level
             * @example Beginner
             * @enum {string}
             */
            difficulty?: "Beginner" | "Intermediate" | "Advanced";
            /**
             * @description Total duration of the course
             * @example 5h 30m
             */
            duration?: string;
            /**
             * @description Course thumbnail image URL
             * @example https://image-url.com/thumbnail.jpg
             */
            thumbnailUrl?: string;
            /**
             * @description Prerequisites for the course
             * @example [
             *       "Basic HTML",
             *       "CSS"
             *     ]
             */
            prerequisites?: string[];
            /** @description List of lessons in the course */
            lessons?: components["schemas"]["LessonDTO"][];
            /**
             * @description ID of the instructor creating the course
             * @example 1
             */
            instructorId: number;
        };
        Object: Record<string, never>;
        LessonUpdateDTO: {
            /**
             * @description ID of the lesson to update
             * @example 1
             */
            id: number;
            /**
             * @description Title of the lesson
             * @example Updated Lesson Title
             */
            title?: string;
            /**
             * @description Lesson content
             * @example Updated content
             */
            content?: string;
            /**
             * @description Video URL for the lesson
             * @example https://video-url.com
             */
            videoUrl?: string;
            /**
             * @description Attachment URL
             * @example https://attachment-url.com/file.pdf
             */
            attachmentUrl?: string;
            /**
             * @description Lesson duration
             * @example 20 min
             */
            duration?: string;
            /**
             * @description Order of the lesson in the course
             * @example 1
             */
            order?: number;
        };
        UpdateCourseDto: {
            /**
             * @description Course title
             * @example Advanced React
             */
            title?: string;
            /**
             * @description Course description
             * @example Updated course description
             */
            description?: string;
            /**
             * @description Category ID of the course
             * @example 2
             */
            categoryId?: number;
            /**
             * @description Difficulty level of the course
             * @example Intermediate
             * @enum {string}
             */
            difficulty?: "Beginner" | "Intermediate" | "Advanced";
            /**
             * @description Total duration of the course
             * @example 6h
             */
            duration?: string;
            /**
             * @description Thumbnail URL for the course
             * @example https://image-url.com/thumbnail.jpg
             */
            thumbnailUrl?: string;
            /**
             * @description Prerequisites for the course
             * @example [
             *       "HTML",
             *       "CSS"
             *     ]
             */
            prerequisites?: string[];
            /** @description List of lessons to update */
            lessons?: components["schemas"]["LessonUpdateDTO"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                    name?: string;
                    password: string;
                    /** @enum {string} */
                    role?: "STUDENT" | "INSTRUCTOR";
                };
            };
        };
        responses: {
            /** @description User registered */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    bio?: string;
                    password?: string;
                };
            };
        };
        responses: {
            /** @description Profile updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    currentPassword: string;
                    newPassword: string;
                };
            };
        };
        responses: {
            /** @description Password changed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_uploadProfilePhoto: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Photo uploaded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getMyEnrollments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Enrollments returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User credentials */
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description Successful login */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponseDto"];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Registration details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            /** @description Registration successful */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterResponseDto"];
                };
            };
            /** @description Bad request or user already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_findAllPublic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of courses returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_getCourseAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Analytics returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_deleteCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_findAllForStudent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Courses returned for user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_createCourse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["CreateCourseDto"];
            };
        };
        responses: {
            /** @description Course created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_addLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    title: string;
                    content?: string;
                    videoUrl?: string;
                    attachmentUrl?: string;
                    duration?: string;
                    order?: number;
                };
            };
        };
        responses: {
            /** @description Lesson added */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_reorderLessons: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    lessonOrders: {
                        lessonId?: number;
                        order?: number;
                    }[];
                };
            };
        };
        responses: {
            /** @description Lessons reordered */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_addPrerequisite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    prerequisiteName: string;
                };
            };
        };
        responses: {
            /** @description Prerequisite added */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_findCoursesForInstructor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Instructor courses returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EnrollmentsController_enroll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Enrolled successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EnrollmentsController_getEnrolledStudents: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Students list returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EnrollmentsController_getCourseDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course details returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EnrollmentsController_myCourses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Enrollments returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EnrollmentsController_completeLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    lessonId: number;
                };
            };
        };
        responses: {
            /** @description Lesson marked as completed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EnrollmentsController_generateCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Certificate URL returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProgressController_getCourseProgress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course progress returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProgressController_upsertProgress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    completed?: boolean;
                    score?: number;
                };
            };
        };
        responses: {
            /** @description Progress upserted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProgressController_getStudentProgress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Progress list returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnalyticsController_instructorCoursesAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Analytics returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnalyticsController_totalStudents: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Total students returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnalyticsController_completionRate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Completion rate returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnalyticsController_allCoursesAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Analytics returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StudentsController_getMyCourses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of enrolled courses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StudentsController_enrollInCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Enrollment successful */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StudentsController_completeCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course completed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StudentsController_uploadProfilePhoto: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile photo updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Instructor profile returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Profile fields to update */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Object"];
            };
        };
        responses: {
            /** @description Profile updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_getMyCourses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of courses returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_getCourseCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course categories returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_createCourse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCourseDto"];
            };
        };
        responses: {
            /** @description Course created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_getCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course details returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_deleteCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_updateCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCourseDto"];
            };
        };
        responses: {
            /** @description Course updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_searchCourses: {
        parameters: {
            query: {
                /** @description Search query string */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of matching courses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_reorderLessons: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    lessonIds?: number[];
                };
            };
        };
        responses: {
            /** @description Lessons reordered successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_addLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LessonDTO"];
            };
        };
        responses: {
            /** @description Lesson added successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_deleteLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Lesson ID */
                lessonId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lesson deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstructorController_updateLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Lesson ID */
                lessonId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LessonDTO"];
            };
        };
        responses: {
            /** @description Lesson updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
